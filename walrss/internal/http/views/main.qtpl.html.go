// Code generated by qtc from "main.qtpl.html". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package views

import "github.com/codemicro/walrss/walrss/internal/db"

import "github.com/codemicro/walrss/walrss/internal/urls"

import "sort"

import "strings"

import "github.com/lithammer/shortuuid/v4"

import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

type MainPage struct {
	BasePage
	EnableDigests bool
	SelectedDay   db.SendDay
	SelectedTime  int
	Feeds         db.FeedSlice
}

func (p *MainPage) StreamTitle(qw422016 *qt422016.Writer) {
}

func (p *MainPage) WriteTitle(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamTitle(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *MainPage) Title() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WriteTitle(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *MainPage) StreamBody(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
<div class="position-fixed top end-0 p-3" style="z-index: 11">
    <div id="toast" class="toast align-items-center text-white bg-primary border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body" id="toastBody">
                Hello, world! This is a toast message.
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

`)
	streamnavbar(qw422016)
	qw422016.N().S(`

<script>
    let toast = document.getElementById("toast")
    let toastBody = document.getElementById("toastBody")

    function showToast(delay) {
        new bootstrap.Toast(toast, {delay: delay}).show();
    }

    function errorHandler(text) {
        toastBody.innerText = "Error: " + text;
        toast.classList.remove("bg-success")
        toast.classList.add("bg-danger")
        showToast(5000)
    }

    document.body.addEventListener("htmx:sendError", function () {
        errorHandler("could not communicate with server");
    });
    document.body.addEventListener("htmx:responseError", function (evt) {
        errorHandler(evt.detail.xhr.response)
    });

    document.body.addEventListener("successResponse", function () {
        toastBody.innerText = "Success!"
        toast.classList.remove("bg-danger")
        toast.classList.add("bg-success")
        showToast(1500)
    })
</script>

<div class="container">
    <h1>My settings</h1>

    `)
	p.StreamRenderScheduleCard(qw422016)
	qw422016.N().S(`

    <div class="card mt-3">
        <div class="card-header">
            Feeds
        </div>
        <div class="card-body">

            <table class="table">
                <thead>
                    <tr style="background: white; width: 100%; position: sticky; top: 0; border-bottom: black 1px solid;">
                        <th scope="col">Name</th>
                        <th scope="col">URL</th>
                        <th scope="col">
                            <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
                                <button
                                        type="button"
                                        class="btn btn-primary"
                                        hx-get="`)
	qw422016.N().S(urls.NewFeedItem)
	qw422016.N().S(`"
                                        hx-target="#feedListing"
                                        hx-swap="beforeend show:bottom"
                                >
                                    <i class="bi bi-plus"></i>
                                </button>
                            </div>
                        </th>
                    </tr>
                </thead>
                <tbody id="feedListing">
                    `)
	sort.Sort(p.Feeds)

	qw422016.N().S(`
                    `)
	for _, feed := range p.Feeds {
		qw422016.N().S(`
                        `)
		StreamRenderFeedRow(qw422016, feed.ID, feed.Name, feed.URL)
		qw422016.N().S(`
                    `)
	}
	qw422016.N().S(`
                </tbody>
            </table>

        </div>
    </div>

    <div class="card mt-3">
        <div class="card-header">
            Import/export
        </div>
        <div class="card-body">

            <div class="row row-cols-lg-auto g-3 align-items-center">

                <div class="col-12">
                    <a href="`)
	qw422016.N().S(urls.ExportAsOPML)
	qw422016.N().S(`" class="btn btn-sm btn-primary" target="_blank">Export (OPML)</a>
                </div>

                <div class="col-12">
                    <button class="btn btn-sm btn-primary" id="importOPMLButton">
                        Import (OPML)
                    </button>

                    <form id="importForm" style="display: none;" hx-trigger="submitImportForm" hx-indicator="importOPMLIndicator" hx-encoding='multipart/form-data' hx-post="`)
	qw422016.N().S(urls.ImportFromOPML)
	qw422016.N().S(`">
                        <input type="file" name="file" id="fileUploadBox">
                    </form>
                </div>

                <div class="col-12">
                    <div class="spinner-border align-middle request-indicator" id="importOPMLIndicator" style="width: 2rem; height: 2rem;" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>

            </div>

            <script>
                const selectFileButton = document.getElementById("importOPMLButton");
                const fileUploadBox = document.getElementById("fileUploadBox");
                const importForm = document.getElementById("importForm");

                selectFileButton.addEventListener("click", function () {
                    fileUploadBox.click();
                });

                fileUploadBox.addEventListener("change", function () {
                    importForm.dispatchEvent(new Event("submitImportForm"));
                });
            </script>

        </div>
    </div>

</div>
`)
}

func (p *MainPage) WriteBody(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamBody(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *MainPage) Body() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WriteBody(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func StreamRenderFeedRow(qw422016 *qt422016.Writer, id, name, url string) {
	qw422016.N().S(`
<tr id="feed-`)
	qw422016.N().S(id)
	qw422016.N().S(`" class="align-middle" hx-target="this" hx-swap="outerHTML">
    <th id="feed-`)
	qw422016.N().S(id)
	qw422016.N().S(`-name" scope="row">`)
	qw422016.E().S(name)
	qw422016.N().S(`</th>
    <td id="feed-`)
	qw422016.N().S(id)
	qw422016.N().S(`-url" >`)
	qw422016.E().S(url)
	qw422016.N().S(`</td>
    <td>
        <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
            <button type="button" class="btn btn-outline-primary" hx-get="`)
	qw422016.N().S(urls.Expand(urls.EditFeedItem, id))
	qw422016.N().S(`">
                <i class="bi bi-pencil-square"></i>
            </button>
            <button
                    type="button"
                    class="btn btn-outline-danger"
                    hx-delete="`)
	qw422016.N().S(urls.Expand(urls.EditFeedItem, id))
	qw422016.N().S(`"
                    hx-confirm="This will permanently delete this item. Are you sure?"
            >
                <i class="bi bi-trash"></i>
            </button>
        </div>
    </td>
</tr>
`)
}

func WriteRenderFeedRow(qq422016 qtio422016.Writer, id, name, url string) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamRenderFeedRow(qw422016, id, name, url)
	qt422016.ReleaseWriter(qw422016)
}

func RenderFeedRow(id, name, url string) string {
	qb422016 := qt422016.AcquireByteBuffer()
	WriteRenderFeedRow(qb422016, id, name, url)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func StreamRenderFeedEditRow(qw422016 *qt422016.Writer, id, name, url string) {
	qw422016.N().S(`
<tr id="feed-`)
	qw422016.N().S(id)
	qw422016.N().S(`" class="align-middle alert alert-warning" hx-target="this" hx-swap="outerHTML">
    <th scope="row"><input
            class="form-control form-control-sm"
            type="text"
            name="name"
            id="feed-`)
	qw422016.N().S(id)
	qw422016.N().S(`-name"
            value="`)
	qw422016.E().J(name)
	qw422016.N().S(`"
    ></th>
    <td><input
            class="form-control form-control-sm"
            type="url"
            name="url"
            id="feed-`)
	qw422016.N().S(id)
	qw422016.N().S(`-url"
            value="`)
	qw422016.E().J(url)
	qw422016.N().S(`"
    ></td>
    <td>
        <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
            <button
                    type="button"
                    class="btn btn-outline-success"
                    hx-put="`)
	qw422016.N().S(urls.Expand(urls.EditFeedItem, id))
	qw422016.N().S(`"
                    hx-include="#feed-`)
	qw422016.N().S(id)
	qw422016.N().S(`-name, #feed-`)
	qw422016.N().S(id)
	qw422016.N().S(`-url"
            >
                <i class="bi bi-check"></i>
            </button>
            <button type="button" class="btn btn-outline-danger" hx-get="`)
	qw422016.N().S(urls.Expand(urls.CancelEditFeedItem, id))
	qw422016.N().S(`"><i class="bi bi-x"></i></button>
        </div>
    </td>
</tr>
`)
}

func WriteRenderFeedEditRow(qq422016 qtio422016.Writer, id, name, url string) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamRenderFeedEditRow(qw422016, id, name, url)
	qt422016.ReleaseWriter(qw422016)
}

func RenderFeedEditRow(id, name, url string) string {
	qb422016 := qt422016.AcquireByteBuffer()
	WriteRenderFeedEditRow(qb422016, id, name, url)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func StreamRenderNewFeedItemRow(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
`)
	id := shortuuid.New()

	qw422016.N().S(`
<tr id="`)
	qw422016.N().S(id)
	qw422016.N().S(`" class="align-middle alert alert-warning" hx-target="this" hx-swap="outerHTML">
    <th scope="row"><input
            id="input-`)
	qw422016.N().S(id)
	qw422016.N().S(`-name"
            class="form-control form-control-sm"
            type="text"
            name="name"
            placeholder="Name"
    ></th>
    <td><input
            id="input-`)
	qw422016.N().S(id)
	qw422016.N().S(`-url"
            class="form-control form-control-sm"
            type="url"
            name="url"
            placeholder="URL"
    ></td>
    <td>
        <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
            <button
                    type="button"
                    class="btn btn-outline-success"
                    hx-post="`)
	qw422016.N().S(urls.NewFeedItem)
	qw422016.N().S(`"
                    hx-include="#input-`)
	qw422016.N().S(id)
	qw422016.N().S(`-name, #input-`)
	qw422016.N().S(id)
	qw422016.N().S(`-url">
                <i class="bi bi-check"></i>
            </button>
            <button type="button" class="btn btn-outline-danger" id="`)
	qw422016.N().S(id)
	qw422016.N().S(`-cancel"><i class="bi bi-x"></i></button>
        </div>
    </td>

    <script>
        document.getElementById("`)
	qw422016.N().S(id)
	qw422016.N().S(`-cancel").addEventListener("click", function () {
            document.getElementById("`)
	qw422016.N().S(id)
	qw422016.N().S(`").outerHTML = "";
        });
    </script>
</tr>
`)
}

func WriteRenderNewFeedItemRow(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamRenderNewFeedItemRow(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func RenderNewFeedItemRow() string {
	qb422016 := qt422016.AcquireByteBuffer()
	WriteRenderNewFeedItemRow(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *MainPage) StreamRenderScheduleCard(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
<div class="card mt-3" id="scheduleCard" hx-target="this" hx-swap="outerHTML">
    <div class="card-header">
        Email settings
    </div>
    <div class="card-body" id="scheduleCardBody">

        <div class="mb-2 row row-cols-lg-auto align-items-center">
            <div class="col-12">
                <input
                        type="checkbox"
                        id="enableCheckbox"
                        name="enable"
                        `)
	if p.EnableDigests {
		qw422016.N().S(`checked`)
	}
	qw422016.N().S(`
                        hx-put="`)
	qw422016.N().S(urls.EditEnabledState)
	qw422016.N().S(`"
                        hx-indicator="#enableCheckboxIndicator"
                >
                <label for="enableCheckbox">Enable digest delivery</label>
            </div>

            <div class="col-12">
                <div class="spinner-border spinner-border-sm request-indicator align-middle" style="width: 1rem; height: 1rem;" role="status" id="enableCheckboxIndicator">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        </div>

        <form
                class="row row-cols-lg-auto g-3 align-items-center"
                hx-put="`)
	qw422016.E().S(urls.EditTimings)
	qw422016.N().S(`"
                hx-indicator="#submitScheduleIndicator"
        >
            <div class="col-12">
                Deliver my digests
            </div>

            <div class="col-12">
                <label class="visually-hidden" for="daySelection">Day of week</label>
                <select
                        class="form-select"
                        id="daySelection"
                        name="day"
                        `)
	if !p.EnableDigests {
		qw422016.N().S(`disabled`)
	}
	qw422016.N().S(`
                >
                    `)
	for i := db.SendDaily; i <= db.SendOnSunday; i += 1 {
		qw422016.N().S(`
                    <option
                            value="`)
		qw422016.N().D(int(i))
		qw422016.N().S(`"
                            `)
		if p.SelectedDay == i {
			qw422016.N().S(`selected`)
		}
		qw422016.N().S(`
                    >
                        `)
		if i != db.SendDaily {
			qw422016.N().S(`on `)
		}
		qw422016.E().S(i.String())
		qw422016.N().S(`
                    </option>
                    `)
	}
	qw422016.N().S(`
                </select>
            </div>

            <div class="col-12">at</div>

            <div class="col-12">
                <label class="visually-hidden" for="timeSelection">Time of day</label>
                <select
                        class="form-select"
                        id="timeSelection"
                        name="time"
                        `)
	if !p.EnableDigests {
		qw422016.N().S(`disabled`)
	}
	qw422016.N().S(`
                >
                    `)
	for i := 0; i <= 23; i += 1 {
		qw422016.N().S(`
                    <option
                            value="`)
		qw422016.N().D(i)
		qw422016.N().S(`"
                            `)
		if p.SelectedTime == i {
			qw422016.N().S(`selected`)
		}
		qw422016.N().S(`
                    >
                        `)
		qw422016.N().D(i)
		qw422016.N().S(`:00
                    </option>
                    `)
	}
	qw422016.N().S(`
                </select>
            </div>

            <div class="col-12">UTC</div>

            <div class="col-12">
                <button type="submit" class="btn btn-primary" `)
	if !p.EnableDigests {
		qw422016.N().S(`disabled`)
	}
	qw422016.N().S(`>Save</button>
            </div>

            <div class="col-12">
                <div class="spinner-border align-middle request-indicator" id="submitScheduleIndicator" style="width: 2rem; height: 2rem;" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        </form>

        <button class="mt-2 btn btn-primary btn-sm" hx-post="`)
	qw422016.N().S(urls.SendTestEmail)
	qw422016.N().S(`" hx-target="#scheduleCardBody">Send test email</button>

    </div>
</div>
`)
}

func (p *MainPage) WriteRenderScheduleCard(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamRenderScheduleCard(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *MainPage) RenderScheduleCard() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WriteRenderScheduleCard(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func StreamRenderTestEmailBox(qw422016 *qt422016.Writer, content string, endOnNext bool) {
	qw422016.N().S(`
`)
	url := urls.TestEmailStatus
	if endOnNext {
		url += "?end=true"
	}
	parts := strings.Split(strings.TrimSpace(content), "\n")
	if len(parts) > 7 {
		parts = parts[len(parts)-7:]
	}

	qw422016.N().S(`
<div class="card-body" hx-get="`)
	qw422016.N().S(url)
	qw422016.N().S(`" hx-trigger="load delay:1s" hx-target="this" hx-swap="outerHTML">
    <h3>Test status</h3>

    `)
	for _, line := range parts {
		qw422016.N().S(`
        <span>`)
		qw422016.E().S(line)
		qw422016.N().S(`</span><br>
    `)
	}
	qw422016.N().S(`
</div>
`)
}

func WriteRenderTestEmailBox(qq422016 qtio422016.Writer, content string, endOnNext bool) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamRenderTestEmailBox(qw422016, content, endOnNext)
	qt422016.ReleaseWriter(qw422016)
}

func RenderTestEmailBox(content string, endOnNext bool) string {
	qb422016 := qt422016.AcquireByteBuffer()
	WriteRenderTestEmailBox(qb422016, content, endOnNext)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}
