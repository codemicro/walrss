// Code generated by qtc from "page.qtpl.html". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package views

import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

type Page interface {
	Title() string
	StreamTitle(qw422016 *qt422016.Writer)
	WriteTitle(qq422016 qtio422016.Writer)
	Body() string
	StreamBody(qw422016 *qt422016.Writer)
	WriteBody(qq422016 qtio422016.Writer)
	HeadContent() string
	StreamHeadContent(qw422016 *qt422016.Writer)
	WriteHeadContent(qq422016 qtio422016.Writer)
}

// Page prints a page implementing Page interface.

func StreamRenderPage(qw422016 *qt422016.Writer, p Page) {
	qw422016.N().S(`
<!DOCTYPE html>
<html>
<head>
    <title>`)
	qw422016.N().S(makePageTitle(p))
	qw422016.N().S(`</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://unpkg.com/htmx.org@1.7.0"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <style>
        [disabled] {
            cursor: not-allowed;
        }

        i.iconLoading {
            background-image: url("data:image/svg+xml,%3Csvg xmlns:svg='http://www.w3.org/2000/svg' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' width='64px' height='64px' viewBox='0 0 128 128' xml:space='preserve'%3E%3Cg%3E%3Cpath d='M75.4 126.63a11.43 11.43 0 0 1-2.1-22.65 40.9 40.9 0 0 0 30.5-30.6 11.4 11.4 0 1 1 22.27 4.87h.02a63.77 63.77 0 0 1-47.8 48.05v-.02a11.38 11.38 0 0 1-2.93.37z' fill='%23000000'/%3E%3CanimateTransform attributeName='transform' type='rotate' from='0 64 64' to='360 64 64' dur='1000ms' repeatCount='indefinite'%3E%3C/animateTransform%3E%3C/g%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-size: cover;
            display: inline-block;
            width: 1rem;
            aspect-ratio: 1/1;
        }
    </style>
    `)
	p.StreamHeadContent(qw422016)
	qw422016.N().S(`
</head>
<body>
`)
	p.StreamBody(qw422016)
	qw422016.N().S(`
</body>
</html>
`)
}

func WriteRenderPage(qq422016 qtio422016.Writer, p Page) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamRenderPage(qw422016, p)
	qt422016.ReleaseWriter(qw422016)
}

func RenderPage(p Page) string {
	qb422016 := qt422016.AcquireByteBuffer()
	WriteRenderPage(qb422016, p)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

type BasePage struct{}

func (p *BasePage) StreamTitle(qw422016 *qt422016.Writer) {
}

func (p *BasePage) WriteTitle(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamTitle(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *BasePage) Title() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WriteTitle(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *BasePage) StreamHeadContent(qw422016 *qt422016.Writer) {
}

func (p *BasePage) WriteHeadContent(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamHeadContent(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *BasePage) HeadContent() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WriteHeadContent(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func StreamProblemBox(qw422016 *qt422016.Writer, p string) {
	qw422016.N().S(`
<div class="alert alert-danger" role="alert">
    `)
	qw422016.N().S(p)
	qw422016.N().S(`
</div>
`)
}

func WriteProblemBox(qq422016 qtio422016.Writer, p string) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamProblemBox(qw422016, p)
	qt422016.ReleaseWriter(qw422016)
}

func ProblemBox(p string) string {
	qb422016 := qt422016.AcquireByteBuffer()
	WriteProblemBox(qb422016, p)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func StreamSuccessBox(qw422016 *qt422016.Writer, p string) {
	qw422016.N().S(`
<div class="alert alert-success" role="alert">
    `)
	qw422016.N().S(p)
	qw422016.N().S(`
</div>
`)
}

func WriteSuccessBox(qq422016 qtio422016.Writer, p string) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamSuccessBox(qw422016, p)
	qt422016.ReleaseWriter(qw422016)
}

func SuccessBox(p string) string {
	qb422016 := qt422016.AcquireByteBuffer()
	WriteSuccessBox(qb422016, p)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func StreamWarningBox(qw422016 *qt422016.Writer, p string) {
	qw422016.N().S(`
<div class="alert alert-warning" role="alert">
    `)
	qw422016.N().S(p)
	qw422016.N().S(`
</div>
`)
}

func WriteWarningBox(qq422016 qtio422016.Writer, p string) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamWarningBox(qw422016, p)
	qt422016.ReleaseWriter(qw422016)
}

func WarningBox(p string) string {
	qb422016 := qt422016.AcquireByteBuffer()
	WriteWarningBox(qb422016, p)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

// PolyPage is used to create a basic page dynamically using Daz.

type PolyPage struct {
	BasePage
	TitleString      string
	BodyContent      string
	ExtraHeadContent string
}

func (p *PolyPage) StreamTitle(qw422016 *qt422016.Writer) {
	qw422016.N().S(p.TitleString)
}

func (p *PolyPage) WriteTitle(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamTitle(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *PolyPage) Title() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WriteTitle(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *PolyPage) StreamBody(qw422016 *qt422016.Writer) {
	streamnavbar(qw422016)
	qw422016.N().S(`<div class="container">`)
	qw422016.N().S(p.BodyContent)
	qw422016.N().S(`</div>`)
}

func (p *PolyPage) WriteBody(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamBody(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *PolyPage) Body() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WriteBody(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func (p *PolyPage) StreamHeadContent(qw422016 *qt422016.Writer) {
	qw422016.N().S(p.ExtraHeadContent)
}

func (p *PolyPage) WriteHeadContent(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	p.StreamHeadContent(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func (p *PolyPage) HeadContent() string {
	qb422016 := qt422016.AcquireByteBuffer()
	p.WriteHeadContent(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}
