// Code generated by qtc from "base.qtpl.html". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package components

import "github.com/codemicro/walrss/walrss/internal/urls"

import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

func StreamHead(qw422016 *qt422016.Writer, title string) {
	qw422016.N().S(`
<head>
  <meta charset="UTF-8">
  <title>`)
	qw422016.N().S(makeTitle(title))
	qw422016.N().S(`</title>
  <link rel="stylesheet" href="`)
	qw422016.E().S(urls.Statics)
	qw422016.N().S(`/main.css">
  <script src="`)
	qw422016.E().S(urls.Statics)
	qw422016.N().S(`/htmx-1.9.0.js" defer></script>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
`)
}

func WriteHead(qq422016 qtio422016.Writer, title string) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamHead(qw422016, title)
	qt422016.ReleaseWriter(qw422016)
}

func Head(title string) string {
	qb422016 := qt422016.AcquireByteBuffer()
	WriteHead(qb422016, title)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func StreamBeginMain(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
<main>
`)
}

func WriteBeginMain(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamBeginMain(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func BeginMain() string {
	qb422016 := qt422016.AcquireByteBuffer()
	WriteBeginMain(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func StreamEndMain(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
<p class="text-center"><a href="https://github.com/codemicro/walrss" target="_blank" rel="noopener noreferrer">Walrss is open-source software</a> that's licensed under the <a href="https://github.com/codemicro/walrss/blob/master/LICENSE" target="_blank" rel="noopener noreferrer">GNU AGPL v3.</a></p>
</main>
`)
}

func WriteEndMain(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamEndMain(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func EndMain() string {
	qb422016 := qt422016.AcquireByteBuffer()
	WriteEndMain(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}
