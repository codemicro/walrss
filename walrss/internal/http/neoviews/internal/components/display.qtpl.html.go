// Code generated by qtc from "display.qtpl.html". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package components

import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

func StreamToast(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
<div id="toast" class="warning">
  <span class="icon"><i class="ok bi bi-check-lg"></i><i class="warning bi bi-x"></i></span>
  <span id="toast-text">o lawd</span>
</div>

<script>
  const toastElem = document.getElementById("toast");

  const showToast = (text) => {
    document.getElementById("toast-text").innerText = text;

    let triggered = false;
    let timeoutID = undefined;
    const close = () => {
      if (!triggered) {
        triggered = true;
        toastElem.classList.remove("show");
      }
      document.removeEventListener("click", close);
      clearTimeout(timeoutID);
    };

    toastElem.addEventListener("click", close);
    timeoutID = setTimeout(close, 3000);

    toastElem.classList.add("show");
  };

  const showOkToast = (text) => {
    toastElem.classList.remove("warning");
    showToast(text);
  };

  const showWarningToast = (text) => {
    toastElem.classList.add("warning");
    showToast(text);
  };

  document.body.addEventListener("htmx:sendError", function () {
      showWarningToast("could not communicate with server");
  });
  document.body.addEventListener("htmx:responseError", function (evt) {
      showWarningToast("Error: " + evt.detail.xhr.response)
  });

  document.body.addEventListener("successResponse", function () {
      showOkToast("Success!")
  })
</script>
`)
}

func WriteToast(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamToast(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func Toast() string {
	qb422016 := qt422016.AcquireByteBuffer()
	WriteToast(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func StreamBeginModal(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
<div class="modal">
    <div class="content">
`)
}

func WriteBeginModal(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamBeginModal(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func BeginModal() string {
	qb422016 := qt422016.AcquireByteBuffer()
	WriteBeginModal(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func StreamEndModal(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
    </div>
</div>
`)
}

func WriteEndModal(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamEndModal(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func EndModal() string {
	qb422016 := qt422016.AcquireByteBuffer()
	WriteEndModal(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func StreamLoadingSpinner(qw422016 *qt422016.Writer) {
	qw422016.N().S(`
<div id="loading">
    <div id="spinner"></div>
</div>
`)
}

func WriteLoadingSpinner(qq422016 qtio422016.Writer) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamLoadingSpinner(qw422016)
	qt422016.ReleaseWriter(qw422016)
}

func LoadingSpinner() string {
	qb422016 := qt422016.AcquireByteBuffer()
	WriteLoadingSpinner(qb422016)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}
