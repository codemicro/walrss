// Code generated by qtc from "settings.qtpl.html". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

package neoviews

import "github.com/codemicro/walrss/walrss/internal/http/neoviews/internal/components"

import "github.com/codemicro/walrss/walrss/internal/db"

import "github.com/codemicro/walrss/walrss/internal/urls"

import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

func StreamSettingsPage(qw422016 *qt422016.Writer, user *db.User) {
	qw422016.N().S(`
<!DOCTYPE html>
<html lang="en">
`)
	components.StreamHead(qw422016, "Settings")
	qw422016.N().S(`
<body>
`)
	components.StreamNavigation(qw422016, menuItems, menuItemSettings)
	qw422016.N().S(`

`)
	components.StreamBeginMain(qw422016)
	qw422016.N().S(`

<div class="container">
    <h1 class="title"><i class="bi bi-gear-fill"></i> Settings</h1>

    <div class="card" hx-target="this">
        `)
	StreamFragmentDeliverySettings(qw422016, user)
	qw422016.N().S(`
    </div>

    <div class="card">
        <h2>Import and Export</h2>
        <p>You can import and export your feeds as OPML files using the buttons below. This will allow you to move your feed collection between different feed readers and processors.</p>
        <p><span class="warning-text">WARNING:</span> you have at least one JSON feed in your feed collection. These will be included in the OPML export, but may cause issues when being imported into other feed readers.</p>
    </div>
</div>

`)
	components.StreamEndMain(qw422016)
	qw422016.N().S(`
`)
	components.StreamToast(qw422016)
	qw422016.N().S(`

</body>
</html>
`)
}

func WriteSettingsPage(qq422016 qtio422016.Writer, user *db.User) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamSettingsPage(qw422016, user)
	qt422016.ReleaseWriter(qw422016)
}

func SettingsPage(user *db.User) string {
	qb422016 := qt422016.AcquireByteBuffer()
	WriteSettingsPage(qb422016, user)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}

func StreamFragmentDeliverySettings(qw422016 *qt422016.Writer, user *db.User) {
	qw422016.N().S(`
    <h2>Delivery Controls</h2>

    <input type="checkbox" name="enable" id="enable-digests-checkbox"
           `)
	if user.Settings.DigestsActive {
		qw422016.N().S(`checked`)
	}
	qw422016.N().S(`
           hx-put="`)
	qw422016.N().S(urls.SettingsEditEnabledState)
	qw422016.N().S(`"
    ><label for="enable-digests-checkbox">Enable digest delivery</label>

    <div class="pt"></div>

    <form hx-put="`)
	qw422016.E().S(urls.SettingsEditTimings)
	qw422016.N().S(`">
        Deliver my digests
        <select
                id="day-selector"
                name="day"
                `)
	if !user.Settings.DigestsActive {
		qw422016.N().S(`disabled`)
	}
	qw422016.N().S(`
        >
            `)
	for i := db.SendDaily; i <= db.SendOnSunday; i += 1 {
		qw422016.N().S(`
            <option
                    value="`)
		qw422016.N().D(int(i))
		qw422016.N().S(`"
                    `)
		if user.Settings.ScheduleDay == i {
			qw422016.N().S(`selected`)
		}
		qw422016.N().S(`
            >
                `)
		if i != db.SendDaily {
			qw422016.N().S(`on `)
		}
		qw422016.E().S(i.String())
		qw422016.N().S(`
            </option>
            `)
	}
	qw422016.N().S(`
        </select>
        at
        <select
                id="time-selector"
                name="time"
                `)
	if !user.Settings.DigestsActive {
		qw422016.N().S(`disabled`)
	}
	qw422016.N().S(`
        >
            `)
	for i := 0; i <= 23; i += 1 {
		qw422016.N().S(`
            <option
                    value="`)
		qw422016.N().D(i)
		qw422016.N().S(`"
                    `)
		if user.Settings.ScheduleHour == i {
			qw422016.N().S(`selected`)
		}
		qw422016.N().S(`
            >
                `)
		qw422016.N().D(i)
		qw422016.N().S(`:00
            </option>
            `)
	}
	qw422016.N().S(`
        </select>
        UTC
        <button type="submit" class="button inline" `)
	if !user.Settings.DigestsActive {
		qw422016.N().S(`disabled`)
	}
	qw422016.N().S(`>Save</button>
    </form>
`)
}

func WriteFragmentDeliverySettings(qq422016 qtio422016.Writer, user *db.User) {
	qw422016 := qt422016.AcquireWriter(qq422016)
	StreamFragmentDeliverySettings(qw422016, user)
	qt422016.ReleaseWriter(qw422016)
}

func FragmentDeliverySettings(user *db.User) string {
	qb422016 := qt422016.AcquireByteBuffer()
	WriteFragmentDeliverySettings(qb422016, user)
	qs422016 := string(qb422016.B)
	qt422016.ReleaseByteBuffer(qb422016)
	return qs422016
}
